import math

class Move:
    def __init__(self, type, moves):
        self.type = type
        self.moves = moves

moves = {}
attacks = {}

# Core Moves (make all)
moves["One"] = Move("m", [[0, 1]])
moves["Two"] = Move("m", [[0, 2]])
moves["Three"] = Move("m", [[0, 3]])
moves["Four"] = Move("m", [[0, 4]])
moves["Five"] = Move("m", [[0, 5]])
moves["Six"] = Move("m", [[0, 6]])
moves["Seven"] = Move("m", [[0, 7]])

moves["OneTwo"] = Move("m", [[0, 1], [0, 2]])
moves["OneThree"] = Move("m", [[0, 1], [0, 3]])
moves["OneFour"] = Move("m", [[0, 1], [0, 4]])

moves["OneTwoThree"] = Move("m", [[0, 1], [0, 2], [0, 3]])

moves["BackOne"] = Move("m", [[0, -1]])
moves["OneBackOne"] = Move("m", [[0, 1], [0, -1]])
moves["DiagonalOne"] = Move("m", [[1, 1], [1, -1]])
moves["Square"] = Move("m", [[1, 0], [-1, 0], [0, 1], [0, -1]])
moves["DiagonalSquare"] = Move("m", [[1, 1], [1, -1], [-1, 1], [-1, -1]])
moves["Lite"] = Move("m", [])
moves["OneDiagonalOne"] = Move("m", [[0, 1], [1, 1], [-1, 1]])
moves["Octa"] = Move("m", [[1, 1], [1, -1], [-1, 1], [-1, -1], [1, 0], [-1, 0], [0, 1], [0, -1]])
moves["OneBackDiagonalOne"] = Move("m", [[0, 1], [1, -1], [-1, -1]])

# Core Attacks (make all)
attacks["Lite"] = Move("a", [])
attacks["U"] = Move("a", [[0, 1]])
attacks["D"] = Move("a", [[0, -1]])
attacks["UD"] = Move("a", [[0, 1], [0, -1]])
attacks["LR"] = Move("a", [[-1, 0], [1, 0]])
attacks["ULUR"] = Move("a", [[-1, 1], [1, 1]])
attacks["DLDR"] = Move("a", [[-1, -1], [1, -1]])
attacks["ULUUR"] = Move("a", [[0, 1], [-1, 1], [1, 1]])
attacks["ULURD"] = Move("a", [[1, 1], [-1, 1], [0, -1]])
attacks["UDLDR"] = Move("a", [[0, 1], [-1, -1], [1, -1]])
attacks["DLDDR"] = Move("a", [[0, -1], [-1, -1], [1, -1]])
attacks["UDLR"] = Move("a", [[0, 1], [0, -1], [-1, 0], [1, 0]])
attacks["ULURLR"] = Move("a", [[-1, 0], [1, 0], [-1, 1], [1, 1]])
attacks["ULURDLDR"] = Move("a", [[1, 1], [1, -1], [-1, 1], [-1, -1]])
attacks["ULUURLR"] = Move("a", [[-1, 0], [1, 0], [0, 1], [-1, 1], [1, 1]])

with open("pawnAutoGenerated.cs", "w") as f:
    f.write("""using System;
using System.Drawing;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.UI;
using System.IO;
using System.Collections.Generic;
using Photon.Pun;
""")

def CalcPoints(move, attack):
    return math.ceil((len(move.moves) / 3) + (len(attack.moves) / 3) - 1)

def GenMoves(moves):
    str = "{ "
    first = True
    for move in moves.moves:
        if first:
            str += f"{{ {move[0]}, {move[1]} }}"
        else:
            str += f",{{ {move[0]}, {move[1]} }}"

        first = False

    str += " }"

    return str

def GeneratePawns():
    first = True
    for move in moves:
        for attack in attacks:
            name = move + "Pawn" + attack

            cs = f"\npublic class {name} : Piece"
            cs += "\n{"
            cs += "\n    public int color { get; set; } = 1;"
            cs += f"\n    public float points {{ get; set; }} = {CalcPoints(moves[move], attacks[attack])};"
            cs += f"\n    public bool disabled {{ get; set; }} = false;"
            cs += f"\n    public int[,] moves {{ get; set; }} = {GenMoves(moves[move])};"
            cs += f"\n    public int[,] oneTimeMoves {{ get; set; }} = {{ {{ 0, 2 }} }};"
            cs += f"\n    public int[,] oneTimeMovesAndAttacks {{ get; set; }} = {{ }};"
            cs += f"\n    public int[,] murderousAttacks {{ get; set; }} = {{ }};"
            cs += f"\n    public bool condition {{ get; set; }} = false;"
            cs += f"\n    public int[,] conditionalAttacks {{ get; set; }} = {{ }};"
            cs += f"\n    public int[,] attacks {{ get; set; }} = {GenMoves(attacks[attack])};"
            cs += f"\n    public int[,] dependentAttacks {{ get; set; }} = {{ }};"
            cs += f"\n    public int[,] interactiveAttacks {{ get; set; }} = {{ }};"
            cs += f"\n    public int[,] positionIndependentMoves {{ get; set; }} = {{ }};"
            cs += f"\n    public int[,] forceStayTurnMoves {{ get; set; }} = {{ }};"
            cs += f"\n    public int[,] flagMove1 {{ get; set; }} = {{ }};"
            cs += f"\n    public int[,] flagMove2 {{ get; set; }} = {{ }};"
            cs += f"\n    public int[,] pushMoves {{ get; set; }} = {{ }};"
            cs += f"\n    public int[,] enPassantMoves {{ get; set; }} = {{ }};"
            cs += f"\n    public int[,] jumpAttacks {{ get; set; }} = {{ }};"
            cs += f"\n    public int[,] moveAndAttacks {{ get; set; }} = {{ }};"
            cs += f"\n    public PhotonView photonView {{ get; set; }} = null;"
            cs += f"\n    public GameObject go {{ get; set; }} = null;"
            cs += f"\n    public String name {{ get; set; }} = {name};"
            cs += f"\n    public bool hasMoved {{ get; set; }} = false;"
            cs += f'\n    public String wImage {{ get; set; }} = "Assets/Images/Pawns/w{name}.png";'
            cs += f'\n    public String bImage {{ get; set; }} = "Assets/Images/Pawns/b{name}.png";'
            cs += f'\n    public int[] startSquare {{ get; set; }} = null;'
            cs += f'\n    public String description {{ get; set; }} = "";'
            cs += f'\n    public String longDescription {{ get; set; }} = "";'
            cs += f'\n    public int alive {{ get; set; }} = 1;'
            cs += f'\n    public int lives {{ get; set; }} = 1;'
            cs += f'\n    public String ability {{ get; set; }} = "None";'
            cs += f'\n    public String state {{ get; set; }} = "Normal";'
            cs += f'\n    public String secondaryState {{ get; set; }} = "Normal";'
            cs += f'\n    public int stackable {{ get; set; }} = 0;'
            cs += f'\n    public int reverseStackable {{ get; set; }} = 0;'
            cs += f'\n    public int collateralType {{ get; set; }} = 0;'
            cs += f'\n    public int[,] collateral {{ get; set; }} = null;'
            cs += f'\n    public int[] size {{ get; set; }} = new int[] {{ 1, 1 }};'
            cs += f'\n    public String promotesInto {{ get; set; }} = "SuperPawn";'
            cs += f'\n    public int promotingRow {{ get; set; }} = 8;'
            cs += f'\n    public int canMoveTwice {{ get; set; }} = 0;'
            cs += f'\n    public int storageLimit {{ get; set; }} = -1;'
            cs += f'\n    public List<Piece> storage {{ get; set; }} = null;'
            cs += """
    public int[,] dependentMovesSet()
    {
        return new int[,] { };
    }

    public int[,] interactiveMovesSet()
    {
        return new int[,] { };
    }

    public bool stayTurn()
    {
        canMoveTwice = 0;
        return false;
    }
            """
            cs += f'\n    public int flag {{ get; set; }} = 0;'
            cs += f'\n    public Piece spawnable {{ get; set; }} = null;'
            cs += f'\n    public {name}(int color, bool online)'
            cs += """
    {
        if (online)
        {
            if (go == null) go = PhotonNetwork.Instantiate("Empty", new Vector2(0, 0), Quaternion.identity);
        }
        else
        {
            if (go == null) go = new GameObject();
        }

        this.color = color;

        go.name = name;

        HelperFunctions.UpdateMovesForColor(this);
        Image s = go.AddComponent<Image>();
        byte[] fileData;

        if (color == 1)
        {
            fileData = File.ReadAllBytes(wImage);
        }
        else
        {
            fileData = File.ReadAllBytes(bImage);
        }

        Texture2D texture2D = new Texture2D(2, 2);
        texture2D.LoadImage(fileData);

        Sprite sp = Sprite.Create(texture2D, new Rect(0, 0, texture2D.width, texture2D.height), new Vector2(0.5f, 0.5f));

        s.sprite = sp;
    }

    public int[] getPosition()
    {
        return position;
    }

    public void setPosition(int[] pos)
    {
        this.position = pos;
    }
}
            """
            with open("pawnAutoGenerated.cs", "a") as f:
                if not first:
                    f.write("\n\n")
                
                first = False
                f.write(cs)

GeneratePawns()

